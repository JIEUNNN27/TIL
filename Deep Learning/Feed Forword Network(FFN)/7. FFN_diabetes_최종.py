# -*- coding: utf-8 -*-
"""코드연습8 - 당뇨병 데이터 데이터 표준화, 설명 추가.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQyEuI8OsrhNp0gmWmmezw0-zKtNxa1A
"""

import numpy as np
import pandas as pd

path = '/content/drive/MyDrive/Colab Notebooks/data/'
diabetes = pd.read_csv(path + 'diabetes.csv')
diabetes.head()

x_feat = np.array(diabetes.drop('Outcome', axis=1))
y_target = np.array(diabetes['Outcome']).reshape(-1,1)

#데이터 표준화
from sklearn.preprocessing import MinMaxScaler

f_scale = MinMaxScaler()


f_scaled = f_scale.fit_transform(x_feat)

#데이터 쪼개기
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(f_scaled, y_target, test_size = 0.2)

x_train

#입력층, 은닉층, 출력층 구성할 때 사용
from tensorflow.keras.layers import Input, Dense
#모델 구성할 때 사용
from tensorflow.keras.models import Model

x_train.shape[1]

y_train.shape[1]

#Network 생성
#입력층 구성
#2차원 구조
#Non의 의미? -> 노트필기에!!
xInput = Input(batch_shape = (None, x_train.shape[1]))

#은닉층 구성
#activation = relu
hLayer = Dense(10, activation = 'relu')(xInput)

#출력층 구성
yOutput = Dense(y_train.shape[1], activation='sigmoid')(hLayer)

"""batch_size와 none의 의미..
```
hyper parameter
```
"""

#모델을 만든다
model = Model(xInput, yOutput)

#학습 방법을 설정
model.compile(loss = 'binary_crossentropy', optimizer='adam')

#학습시킨다
#model.fit(x_train, y_train, epochs = 100)

#batch_size를 적당이 넣어 준다... -> hyper parameter
#model.fit(x_train, y_train, batch_size = 1, epochs = 100)
#model.fit(x_train, y_train, batch_size = 50, epochs = 100)

import matplotlib.pyplot as plt

#이렇게 하면 중간중간에 loss값을 계산해서 보여준다
#(loss: 트레인, loss: xptmxm)
hist = model.fit(x_train, y_train, batch_size = 50, epochs = 100,
          validation_data = (x_test, y_test))

"""## 이것을 활용해서 epoch를 어느정도로 할 지 결정할 수 있다"""

#error가 감소하는 모습을 관찰하기
plt.plot(hist.history['loss'], label = 'Train loss')
plt.plot(hist.history['val_loss'], label = 'Test loss')
plt.lengend()
plt.title("Loss function")
plt.xlabel("epoch")
plt.ylabel("loss")
plt.show

#평가
y_prob = model.predict(x_test)
y_pred = (y_prob>0.5).astype('int8')

acc = (y_test == y_pred).mean()
print(acc)