# -*- coding: utf-8 -*-
"""4-11.naver_movie(data).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P2QmiFVwF2i8T4Dy8IizzLL4ohz55Ipo
"""

!pip install sentencepiece

import pandas as pd
import numpy as np
import sentencepiece as spm
from tensorflow.keras.preprocessing.sequence import pad_sequences
import re
import pickle
from tqdm.auto import tqdm

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/Colab Notebooks'

train_data = pd.read_csv('data/naver_movie/ratings_train.txt', sep='\t')
test_data = pd.read_csv('data/naver_movie/ratings_test.txt', sep='\t')
train_data = train_data.dropna()
test_data = test_data.dropna()

train_data.head()

# 기호, 숫자, 영어 등은 제외하고 한글만 사용한다.
train_list = [re.sub("[^가-힣ㄱ-ㅎㅏ-ㅣ\s]", "", x) for x in train_data['document']]
test_list = [re.sub("[^가-힣ㄱ-ㅎㅏ-ㅣ\s]", "", x) for x in test_data['document']]

# Sentencepice용 사전을 만들기 위해 train_list, test_list를 저장해 둔다.
data_file = "data/naver_data.txt"
with open(data_file, 'w', encoding='utf-8') as f:
    for sent in train_list + test_list:
        f.write(sent + '\n')
        
# Google의 Sentencepiece를 이용해서 vocabulary를 생성한다.
templates= "--input={} \
            --pad_id=0 --pad_piece=<PAD>\
            --unk_id=1 --unk_piece=<UNK>\
            --bos_id=2 --bos_piece=<BOS>\
            --eos_id=3 --eos_piece=<EOS>\
            --model_prefix={} \
            --vocab_size={}"

VOCAB_SIZE = 10000
model_prefix = "data/naver_model"
params = templates.format(data_file, model_prefix, VOCAB_SIZE)

spm.SentencePieceTrainer.Train(params)
sp = spm.SentencePieceProcessor()
sp.Load(model_prefix + '.model')

with open(model_prefix + '.vocab', encoding='utf-8') as f:
    vocab = [doc.strip().split('\t') for doc in f]

word2idx = {k:v for v, [k, _] in enumerate(vocab)}
idx2word = {v:k for v, [k, _] in enumerate(vocab)}

# 리뷰 문장을 사전의 인덱스로 표시
train_seq = [sp.encode_as_ids(x) for x in train_list]
test_seq = [sp.encode_as_ids(x) for x in test_list]

# 육안 확인용
sentence = train_list[0]
idx = train_seq[0]
enc = sp.encode_as_pieces(sentence)
dec = sp.decode_ids(idx)

print(sentence)
print(enc)
print(idx)
print([idx2word[x] for x in idx])
print(dec)

MAX_SEQ_LEN = 12  # 문장 최대 길이
x_train = pad_sequences(train_seq, maxlen=MAX_SEQ_LEN, padding='post', truncating='post')
x_test = pad_sequences(test_seq, maxlen=MAX_SEQ_LEN, padding='post', truncating='post')

y_train = np.array(train_data['label'])
y_test = np.array(test_data['label'])

# 학습 데이터를 저장해 둔다.
with open('data/naver_sentencepiece.pkl', 'wb') as f:
    pickle.dump([x_train, x_test, y_train, y_test, word2idx], f, pickle.DEFAULT_PROTOCOL)

x_train[3]

